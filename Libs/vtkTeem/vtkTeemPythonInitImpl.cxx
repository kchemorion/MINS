// Generated by vtkWrapPythonInit in VTK/Wrapping
#include "vtkPythonUtil.h"
#include "vtkSystemIncludes.h"
#include <cstring>
// Handle compiler warning messages, etc.
#if defined( _MSC_VER ) && !defined(VTK_DISPLAY_WIN32_WARNINGS)
#pragma warning ( disable : 4706 )
#endif // Windows Warnings

extern "C" { void PyVTKAddFile_vtkDiffusionTensorMathematics(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkDiffusionTensorGlyph(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkTeemNRRDReader(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkTeemNRRDWriter(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkImageLabelCombine(PyObject *dict); }

static PyMethodDef PyvtkTeemPython_Methods[] = {
{nullptr, nullptr, 0, nullptr}};

static PyModuleDef PyvtkTeemPython_Module = {
  PyModuleDef_HEAD_INIT,
  "vtkTeemPython", // m_name
  nullptr, // m_doc
  0, // m_size
  PyvtkTeemPython_Methods, //m_methods
  nullptr, // m_reload
  nullptr, // m_traverse
  nullptr, // m_clear
  nullptr  // m_free
};
extern  "C" {VTK_ABI_EXPORT PyObject *real_initvtkTeemPython(const char * /*unused*/); }

PyObject *real_initvtkTeemPython(const char * /*unused*/)
{
  PyObject *m = PyModule_Create(&PyvtkTeemPython_Module);
  PyObject *d = PyModule_GetDict(m);
  if (!d)
  {
    Py_FatalError("can't get dictionary for module vtkTeemPython");
  }

  vtkPythonUtil::Initialize();

  PyVTKAddFile_vtkDiffusionTensorMathematics(d);
  PyVTKAddFile_vtkDiffusionTensorGlyph(d);
  PyVTKAddFile_vtkTeemNRRDReader(d);
  PyVTKAddFile_vtkTeemNRRDWriter(d);
  PyVTKAddFile_vtkImageLabelCombine(d);

  vtkPythonUtil::AddModule("vtkTeemPython");

  return m;
}

