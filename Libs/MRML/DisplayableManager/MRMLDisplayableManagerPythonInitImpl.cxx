// Generated by vtkWrapPythonInit in VTK/Wrapping
#include "vtkPythonUtil.h"
#include "vtkSystemIncludes.h"
#include <cstring>
// Handle compiler warning messages, etc.
#if defined( _MSC_VER ) && !defined(VTK_DISPLAY_WIN32_WARNINGS)
#pragma warning ( disable : 4706 )
#endif // Windows Warnings

extern "C" { void PyVTKAddFile_vtkMRMLCameraDisplayableManager(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLModelDisplayableManager(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLViewDisplayableManager(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLThreeDReformatDisplayableManager(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLCrosshairDisplayableManager(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLCrosshairDisplayableManager3D(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLModelSliceDisplayableManager(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLVolumeGlyphSliceDisplayableManager(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLOrientationMarkerDisplayableManager(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLRulerDisplayableManager(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLScalarBarDisplayableManager(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLAbstractDisplayableManager(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLDisplayableManagerGroup(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLDisplayableManagerFactory(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLInteractionEventData(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLAbstractThreeDViewDisplayableManager(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLThreeDViewDisplayableManagerFactory(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLAbstractSliceViewDisplayableManager(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLSliceViewDisplayableManagerFactory(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLViewInteractorStyle(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLSliceViewInteractorStyle(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLThreeDViewInteractorStyle(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLAbstractWidget(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLAbstractWidgetRepresentation(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLCameraWidget(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLSliceIntersectionWidget(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLSliceIntersectionRepresentation2D(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLSliceIntersectionInteractionRepresentation(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLSliceIntersectionInteractionRepresentationHelper(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLRubberBandWidgetRepresentation(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLWindowLevelWidget(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLLightBoxRendererManagerProxy(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLScriptedDisplayableManager(PyObject *dict); }

static PyMethodDef PyMRMLDisplayableManagerPython_Methods[] = {
{nullptr, nullptr, 0, nullptr}};

static PyModuleDef PyMRMLDisplayableManagerPython_Module = {
  PyModuleDef_HEAD_INIT,
  "MRMLDisplayableManagerPython", // m_name
  nullptr, // m_doc
  0, // m_size
  PyMRMLDisplayableManagerPython_Methods, //m_methods
  nullptr, // m_reload
  nullptr, // m_traverse
  nullptr, // m_clear
  nullptr  // m_free
};
extern  "C" {VTK_ABI_EXPORT PyObject *real_initMRMLDisplayableManagerPython(const char * /*unused*/); }

PyObject *real_initMRMLDisplayableManagerPython(const char * /*unused*/)
{
  PyObject *m = PyModule_Create(&PyMRMLDisplayableManagerPython_Module);
  PyObject *d = PyModule_GetDict(m);
  if (!d)
  {
    Py_FatalError("can't get dictionary for module MRMLDisplayableManagerPython");
  }

  const char *depends[6] = {
    "MRMLCorePython",
    "vtkAddonPython",
    "vtkITKPython",
    "vtkSegmentationCorePython",
    "vtkTeemPython",
    "MRMLLogicPython",
  };

  for (int i = 0; i < 6; i++)
  {
    if (!vtkPythonUtil::ImportModule(depends[i], d))
    {
      Py_DECREF(m);
      return PyErr_Format(PyExc_ImportError,
        "Failed to load MRMLDisplayableManagerPython: No module named %s",
        depends[i]);
    }
  }

  if (!vtkPythonUtil::IsInitialized())
  {
    Py_DECREF(m);
    return PyErr_Format(PyExc_ImportError,
      "Initialization failed for MRMLDisplayableManagerPython, not compatible with %s",
      depends[0]);
  }

  PyVTKAddFile_vtkMRMLCameraDisplayableManager(d);
  PyVTKAddFile_vtkMRMLModelDisplayableManager(d);
  PyVTKAddFile_vtkMRMLViewDisplayableManager(d);
  PyVTKAddFile_vtkMRMLThreeDReformatDisplayableManager(d);
  PyVTKAddFile_vtkMRMLCrosshairDisplayableManager(d);
  PyVTKAddFile_vtkMRMLCrosshairDisplayableManager3D(d);
  PyVTKAddFile_vtkMRMLModelSliceDisplayableManager(d);
  PyVTKAddFile_vtkMRMLVolumeGlyphSliceDisplayableManager(d);
  PyVTKAddFile_vtkMRMLOrientationMarkerDisplayableManager(d);
  PyVTKAddFile_vtkMRMLRulerDisplayableManager(d);
  PyVTKAddFile_vtkMRMLScalarBarDisplayableManager(d);
  PyVTKAddFile_vtkMRMLAbstractDisplayableManager(d);
  PyVTKAddFile_vtkMRMLDisplayableManagerGroup(d);
  PyVTKAddFile_vtkMRMLDisplayableManagerFactory(d);
  PyVTKAddFile_vtkMRMLInteractionEventData(d);
  PyVTKAddFile_vtkMRMLAbstractThreeDViewDisplayableManager(d);
  PyVTKAddFile_vtkMRMLThreeDViewDisplayableManagerFactory(d);
  PyVTKAddFile_vtkMRMLAbstractSliceViewDisplayableManager(d);
  PyVTKAddFile_vtkMRMLSliceViewDisplayableManagerFactory(d);
  PyVTKAddFile_vtkMRMLViewInteractorStyle(d);
  PyVTKAddFile_vtkMRMLSliceViewInteractorStyle(d);
  PyVTKAddFile_vtkMRMLThreeDViewInteractorStyle(d);
  PyVTKAddFile_vtkMRMLAbstractWidget(d);
  PyVTKAddFile_vtkMRMLAbstractWidgetRepresentation(d);
  PyVTKAddFile_vtkMRMLCameraWidget(d);
  PyVTKAddFile_vtkMRMLSliceIntersectionWidget(d);
  PyVTKAddFile_vtkMRMLSliceIntersectionRepresentation2D(d);
  PyVTKAddFile_vtkMRMLSliceIntersectionInteractionRepresentation(d);
  PyVTKAddFile_vtkMRMLSliceIntersectionInteractionRepresentationHelper(d);
  PyVTKAddFile_vtkMRMLRubberBandWidgetRepresentation(d);
  PyVTKAddFile_vtkMRMLWindowLevelWidget(d);
  PyVTKAddFile_vtkMRMLLightBoxRendererManagerProxy(d);
  PyVTKAddFile_vtkMRMLScriptedDisplayableManager(d);

  vtkPythonUtil::AddModule("MRMLDisplayableManagerPython");

  return m;
}

