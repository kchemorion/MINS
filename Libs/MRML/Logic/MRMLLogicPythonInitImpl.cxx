// Generated by vtkWrapPythonInit in VTK/Wrapping
#include "vtkPythonUtil.h"
#include "vtkSystemIncludes.h"
#include <cstring>
// Handle compiler warning messages, etc.
#if defined( _MSC_VER ) && !defined(VTK_DISPLAY_WIN32_WARNINGS)
#pragma warning ( disable : 4706 )
#endif // Windows Warnings

extern "C" { void PyVTKAddFile_vtkMRMLAbstractLogic(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLApplicationLogic(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLColorLogic(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLDisplayableHierarchyLogic(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLRemoteIOLogic(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLLayoutLogic(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLSliceLayerLogic(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLSliceLogic(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLSliceLinkLogic(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLViewLogic(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkMRMLViewLinkLogic(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkImageLabelOutline(PyObject *dict); }
extern "C" { void PyVTKAddFile_vtkImageNeighborhoodFilter(PyObject *dict); }

static PyMethodDef PyMRMLLogicPython_Methods[] = {
{nullptr, nullptr, 0, nullptr}};

static PyModuleDef PyMRMLLogicPython_Module = {
  PyModuleDef_HEAD_INIT,
  "MRMLLogicPython", // m_name
  nullptr, // m_doc
  0, // m_size
  PyMRMLLogicPython_Methods, //m_methods
  nullptr, // m_reload
  nullptr, // m_traverse
  nullptr, // m_clear
  nullptr  // m_free
};
extern  "C" {VTK_ABI_EXPORT PyObject *real_initMRMLLogicPython(const char * /*unused*/); }

PyObject *real_initMRMLLogicPython(const char * /*unused*/)
{
  PyObject *m = PyModule_Create(&PyMRMLLogicPython_Module);
  PyObject *d = PyModule_GetDict(m);
  if (!d)
  {
    Py_FatalError("can't get dictionary for module MRMLLogicPython");
  }

  const char *depends[5] = {
    "MRMLCorePython",
    "vtkAddonPython",
    "vtkITKPython",
    "vtkSegmentationCorePython",
    "vtkTeemPython",
  };

  for (int i = 0; i < 5; i++)
  {
    if (!vtkPythonUtil::ImportModule(depends[i], d))
    {
      Py_DECREF(m);
      return PyErr_Format(PyExc_ImportError,
        "Failed to load MRMLLogicPython: No module named %s",
        depends[i]);
    }
  }

  if (!vtkPythonUtil::IsInitialized())
  {
    Py_DECREF(m);
    return PyErr_Format(PyExc_ImportError,
      "Initialization failed for MRMLLogicPython, not compatible with %s",
      depends[0]);
  }

  PyVTKAddFile_vtkMRMLAbstractLogic(d);
  PyVTKAddFile_vtkMRMLApplicationLogic(d);
  PyVTKAddFile_vtkMRMLColorLogic(d);
  PyVTKAddFile_vtkMRMLDisplayableHierarchyLogic(d);
  PyVTKAddFile_vtkMRMLRemoteIOLogic(d);
  PyVTKAddFile_vtkMRMLLayoutLogic(d);
  PyVTKAddFile_vtkMRMLSliceLayerLogic(d);
  PyVTKAddFile_vtkMRMLSliceLogic(d);
  PyVTKAddFile_vtkMRMLSliceLinkLogic(d);
  PyVTKAddFile_vtkMRMLViewLogic(d);
  PyVTKAddFile_vtkMRMLViewLinkLogic(d);
  PyVTKAddFile_vtkImageLabelOutline(d);
  PyVTKAddFile_vtkImageNeighborhoodFilter(d);

  vtkPythonUtil::AddModule("MRMLLogicPython");

  return m;
}

