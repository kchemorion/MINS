// python wrapper for vtkSlicerTerminologiesModuleLogic
//
#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include "vtkPythonArgs.h"
#include "vtkPythonOverload.h"
#include <cstddef>
#include <sstream>
#include "vtkVariant.h"
#include "vtkIndent.h"
#include "vtkSlicerTerminologiesModuleLogic.h"

#if defined(PYTHON_PACKAGE)
#define PYTHON_PACKAGE_SCOPE PYTHON_PACKAGE "."
#else
#define PYTHON_PACKAGE_SCOPE
#endif

extern "C" { VTK_ABI_EXPORT void PyVTKAddFile_vtkSlicerTerminologiesModuleLogic(PyObject *dict); }
extern "C" { PyObject *PyvtkSlicerTerminologiesModuleLogic_ClassNew(); }


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_IsTypeOf(PyObject * /*unused*/, PyObject *args)
{
  vtkPythonArgs ap(args, "IsTypeOf");

  const char *temp0 = nullptr;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    int tempr = vtkSlicerTerminologiesModuleLogic::IsTypeOf(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_IsA(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "IsA");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  const char *temp0 = nullptr;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    int tempr = (ap.IsBound() ?
      op->IsA(temp0) :
      op->vtkSlicerTerminologiesModuleLogic::IsA(temp0));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_SafeDownCast(PyObject * /*unused*/, PyObject *args)
{
  vtkPythonArgs ap(args, "SafeDownCast");

  vtkObjectBase *temp0 = nullptr;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(1) &&
      ap.GetVTKObject(temp0, "vtkObjectBase"))
  {
    vtkSlicerTerminologiesModuleLogic *tempr = vtkSlicerTerminologiesModuleLogic::SafeDownCast(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildVTKObject(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_NewInstance(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "NewInstance");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    vtkSlicerTerminologiesModuleLogic *tempr = (ap.IsBound() ?
      op->NewInstance() :
      op->vtkSlicerTerminologiesModuleLogic::NewInstance());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildVTKObject(tempr);
      if (result && PyVTKObject_Check(result))
      {
        PyVTKObject_GetObject(result)->UnRegister(nullptr);
        PyVTKObject_SetFlag(result, VTK_PYTHON_IGNORE_UNREGISTER, 1);
      }
    }
    else if (tempr != nullptr)
    {
      ap.DeleteVTKObject(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_GetNumberOfGenerationsFromBaseType(PyObject * /*unused*/, PyObject *args)
{
  vtkPythonArgs ap(args, "GetNumberOfGenerationsFromBaseType");

  const char *temp0 = nullptr;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    long long tempr = vtkSlicerTerminologiesModuleLogic::GetNumberOfGenerationsFromBaseType(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_GetNumberOfGenerationsFromBase(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetNumberOfGenerationsFromBase");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  const char *temp0 = nullptr;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    long long tempr = (ap.IsBound() ?
      op->GetNumberOfGenerationsFromBase(temp0) :
      op->vtkSlicerTerminologiesModuleLogic::GetNumberOfGenerationsFromBase(temp0));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_GetNameAutoGeneratedAttributeName(PyObject * /*unused*/, PyObject *args)
{
  vtkPythonArgs ap(args, "GetNameAutoGeneratedAttributeName");

  PyObject *result = nullptr;

  if (ap.CheckArgCount(0))
  {
    const char *tempr = vtkSlicerTerminologiesModuleLogic::GetNameAutoGeneratedAttributeName();

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_GetColorAutoGeneratedAttributeName(PyObject * /*unused*/, PyObject *args)
{
  vtkPythonArgs ap(args, "GetColorAutoGeneratedAttributeName");

  PyObject *result = nullptr;

  if (ap.CheckArgCount(0))
  {
    const char *tempr = vtkSlicerTerminologiesModuleLogic::GetColorAutoGeneratedAttributeName();

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_LoadContextFromFile(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "LoadContextFromFile");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  std::string temp0;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    bool tempr = (ap.IsBound() ?
      op->LoadContextFromFile(temp0) :
      op->vtkSlicerTerminologiesModuleLogic::LoadContextFromFile(temp0));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_LoadTerminologyFromFile(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "LoadTerminologyFromFile");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  std::string temp0;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    std::string tempr = (ap.IsBound() ?
      op->LoadTerminologyFromFile(temp0) :
      op->vtkSlicerTerminologiesModuleLogic::LoadTerminologyFromFile(temp0));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_LoadAnatomicContextFromFile(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "LoadAnatomicContextFromFile");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  std::string temp0;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    std::string tempr = (ap.IsBound() ?
      op->LoadAnatomicContextFromFile(temp0) :
      op->vtkSlicerTerminologiesModuleLogic::LoadAnatomicContextFromFile(temp0));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_LoadTerminologyFromSegmentDescriptorFile(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "LoadTerminologyFromSegmentDescriptorFile");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  std::string temp0;
  std::string temp1;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(2) &&
      ap.GetValue(temp0) &&
      ap.GetValue(temp1))
  {
    bool tempr = (ap.IsBound() ?
      op->LoadTerminologyFromSegmentDescriptorFile(temp0, temp1) :
      op->vtkSlicerTerminologiesModuleLogic::LoadTerminologyFromSegmentDescriptorFile(temp0, temp1));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_LoadAnatomicContextFromSegmentDescriptorFile(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "LoadAnatomicContextFromSegmentDescriptorFile");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  std::string temp0;
  std::string temp1;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(2) &&
      ap.GetValue(temp0) &&
      ap.GetValue(temp1))
  {
    bool tempr = (ap.IsBound() ?
      op->LoadAnatomicContextFromSegmentDescriptorFile(temp0, temp1) :
      op->vtkSlicerTerminologiesModuleLogic::LoadAnatomicContextFromSegmentDescriptorFile(temp0, temp1));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_GetLoadedTerminologyNames_s1(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetLoadedTerminologyNames");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  std::vector<std::string> temp0(ap.GetArgSize(0));
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetArray(temp0.data(), temp0.size()))
  {
    if (ap.IsBound())
    {
      op->GetLoadedTerminologyNames(temp0);
    }
    else
    {
      op->vtkSlicerTerminologiesModuleLogic::GetLoadedTerminologyNames(temp0);
    }

    if (!ap.ErrorOccurred())
    {
      PyObject *vec = (temp0.empty() ?
        PyTuple_New(0) :
        vtkPythonArgs::BuildTuple(temp0.data(), temp0.size()));
      ap.SetContents(0, vec);
      Py_DECREF(vec);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}

static PyObject *
PyvtkSlicerTerminologiesModuleLogic_GetLoadedTerminologyNames_s2(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetLoadedTerminologyNames");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  vtkStringArray *temp0 = nullptr;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetVTKObject(temp0, "vtkStringArray"))
  {
    if (ap.IsBound())
    {
      op->GetLoadedTerminologyNames(temp0);
    }
    else
    {
      op->vtkSlicerTerminologiesModuleLogic::GetLoadedTerminologyNames(temp0);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}

static PyMethodDef PyvtkSlicerTerminologiesModuleLogic_GetLoadedTerminologyNames_Methods[] = {
  {"GetLoadedTerminologyNames", PyvtkSlicerTerminologiesModuleLogic_GetLoadedTerminologyNames_s1, METH_VARARGS,
   "@T s"},
  {"GetLoadedTerminologyNames", PyvtkSlicerTerminologiesModuleLogic_GetLoadedTerminologyNames_s2, METH_VARARGS,
   "@V *vtkStringArray"},
  {nullptr, nullptr, 0, nullptr}
};

static PyObject *
PyvtkSlicerTerminologiesModuleLogic_GetLoadedTerminologyNames(PyObject *self, PyObject *args)
{
  PyMethodDef *methods = PyvtkSlicerTerminologiesModuleLogic_GetLoadedTerminologyNames_Methods;
  int nargs = vtkPythonArgs::GetArgCount(self, args);

  switch(nargs)
  {
    case 1:
      return vtkPythonOverload::CallMethod(methods, self, args);
  }

  vtkPythonArgs::ArgCountError(nargs, "GetLoadedTerminologyNames");
  return nullptr;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_GetLoadedAnatomicContextNames_s1(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetLoadedAnatomicContextNames");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  std::vector<std::string> temp0(ap.GetArgSize(0));
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetArray(temp0.data(), temp0.size()))
  {
    if (ap.IsBound())
    {
      op->GetLoadedAnatomicContextNames(temp0);
    }
    else
    {
      op->vtkSlicerTerminologiesModuleLogic::GetLoadedAnatomicContextNames(temp0);
    }

    if (!ap.ErrorOccurred())
    {
      PyObject *vec = (temp0.empty() ?
        PyTuple_New(0) :
        vtkPythonArgs::BuildTuple(temp0.data(), temp0.size()));
      ap.SetContents(0, vec);
      Py_DECREF(vec);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}

static PyObject *
PyvtkSlicerTerminologiesModuleLogic_GetLoadedAnatomicContextNames_s2(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetLoadedAnatomicContextNames");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  vtkStringArray *temp0 = nullptr;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetVTKObject(temp0, "vtkStringArray"))
  {
    if (ap.IsBound())
    {
      op->GetLoadedAnatomicContextNames(temp0);
    }
    else
    {
      op->vtkSlicerTerminologiesModuleLogic::GetLoadedAnatomicContextNames(temp0);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}

static PyMethodDef PyvtkSlicerTerminologiesModuleLogic_GetLoadedAnatomicContextNames_Methods[] = {
  {"GetLoadedAnatomicContextNames", PyvtkSlicerTerminologiesModuleLogic_GetLoadedAnatomicContextNames_s1, METH_VARARGS,
   "@T s"},
  {"GetLoadedAnatomicContextNames", PyvtkSlicerTerminologiesModuleLogic_GetLoadedAnatomicContextNames_s2, METH_VARARGS,
   "@V *vtkStringArray"},
  {nullptr, nullptr, 0, nullptr}
};

static PyObject *
PyvtkSlicerTerminologiesModuleLogic_GetLoadedAnatomicContextNames(PyObject *self, PyObject *args)
{
  PyMethodDef *methods = PyvtkSlicerTerminologiesModuleLogic_GetLoadedAnatomicContextNames_Methods;
  int nargs = vtkPythonArgs::GetArgCount(self, args);

  switch(nargs)
  {
    case 1:
      return vtkPythonOverload::CallMethod(methods, self, args);
  }

  vtkPythonArgs::ArgCountError(nargs, "GetLoadedAnatomicContextNames");
  return nullptr;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_GetNumberOfCategoriesInTerminology(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetNumberOfCategoriesInTerminology");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  std::string temp0;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    int tempr = (ap.IsBound() ?
      op->GetNumberOfCategoriesInTerminology(temp0) :
      op->vtkSlicerTerminologiesModuleLogic::GetNumberOfCategoriesInTerminology(temp0));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_GetNthCategoryInTerminology(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetNthCategoryInTerminology");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  std::string temp0;
  int temp1;
  vtkSlicerTerminologyCategory *temp2 = nullptr;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(3) &&
      ap.GetValue(temp0) &&
      ap.GetValue(temp1) &&
      ap.GetVTKObject(temp2, "vtkSlicerTerminologyCategory"))
  {
    bool tempr = (ap.IsBound() ?
      op->GetNthCategoryInTerminology(temp0, temp1, temp2) :
      op->vtkSlicerTerminologiesModuleLogic::GetNthCategoryInTerminology(temp0, temp1, temp2));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_GetNumberOfTypesInTerminologyCategory(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetNumberOfTypesInTerminologyCategory");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  std::string temp0;
  vtkSlicerTerminologyCategory *temp1 = nullptr;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(2) &&
      ap.GetValue(temp0) &&
      ap.GetVTKObject(temp1, "vtkSlicerTerminologyCategory"))
  {
    int tempr = (ap.IsBound() ?
      op->GetNumberOfTypesInTerminologyCategory(temp0, temp1) :
      op->vtkSlicerTerminologiesModuleLogic::GetNumberOfTypesInTerminologyCategory(temp0, temp1));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_GetNthTypeInTerminologyCategory(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetNthTypeInTerminologyCategory");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  std::string temp0;
  vtkSlicerTerminologyCategory *temp1 = nullptr;
  int temp2;
  vtkSlicerTerminologyType *temp3 = nullptr;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(4) &&
      ap.GetValue(temp0) &&
      ap.GetVTKObject(temp1, "vtkSlicerTerminologyCategory") &&
      ap.GetValue(temp2) &&
      ap.GetVTKObject(temp3, "vtkSlicerTerminologyType"))
  {
    bool tempr = (ap.IsBound() ?
      op->GetNthTypeInTerminologyCategory(temp0, temp1, temp2, temp3) :
      op->vtkSlicerTerminologiesModuleLogic::GetNthTypeInTerminologyCategory(temp0, temp1, temp2, temp3));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_GetNumberOfTypeModifiersInTerminologyType(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetNumberOfTypeModifiersInTerminologyType");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  std::string temp0;
  vtkSlicerTerminologyCategory *temp1 = nullptr;
  vtkSlicerTerminologyType *temp2 = nullptr;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(3) &&
      ap.GetValue(temp0) &&
      ap.GetVTKObject(temp1, "vtkSlicerTerminologyCategory") &&
      ap.GetVTKObject(temp2, "vtkSlicerTerminologyType"))
  {
    int tempr = (ap.IsBound() ?
      op->GetNumberOfTypeModifiersInTerminologyType(temp0, temp1, temp2) :
      op->vtkSlicerTerminologiesModuleLogic::GetNumberOfTypeModifiersInTerminologyType(temp0, temp1, temp2));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_GetNthTypeModifierInTerminologyType(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetNthTypeModifierInTerminologyType");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  std::string temp0;
  vtkSlicerTerminologyCategory *temp1 = nullptr;
  vtkSlicerTerminologyType *temp2 = nullptr;
  int temp3;
  vtkSlicerTerminologyType *temp4 = nullptr;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(5) &&
      ap.GetValue(temp0) &&
      ap.GetVTKObject(temp1, "vtkSlicerTerminologyCategory") &&
      ap.GetVTKObject(temp2, "vtkSlicerTerminologyType") &&
      ap.GetValue(temp3) &&
      ap.GetVTKObject(temp4, "vtkSlicerTerminologyType"))
  {
    bool tempr = (ap.IsBound() ?
      op->GetNthTypeModifierInTerminologyType(temp0, temp1, temp2, temp3, temp4) :
      op->vtkSlicerTerminologiesModuleLogic::GetNthTypeModifierInTerminologyType(temp0, temp1, temp2, temp3, temp4));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_FindTypeInTerminologyBy3dSlicerLabel(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "FindTypeInTerminologyBy3dSlicerLabel");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  std::string temp0;
  std::string temp1;
  vtkSlicerTerminologyEntry *temp2 = nullptr;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(3) &&
      ap.GetValue(temp0) &&
      ap.GetValue(temp1) &&
      ap.GetVTKObject(temp2, "vtkSlicerTerminologyEntry"))
  {
    bool tempr = (ap.IsBound() ?
      op->FindTypeInTerminologyBy3dSlicerLabel(temp0, temp1, temp2) :
      op->vtkSlicerTerminologiesModuleLogic::FindTypeInTerminologyBy3dSlicerLabel(temp0, temp1, temp2));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_SerializeTerminologyEntry_s1(PyObject * /*unused*/, PyObject *args)
{
  vtkPythonArgs ap(args, "SerializeTerminologyEntry");

  vtkSlicerTerminologyEntry *temp0 = nullptr;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(1) &&
      ap.GetVTKObject(temp0, "vtkSlicerTerminologyEntry"))
  {
    std::string tempr = vtkSlicerTerminologiesModuleLogic::SerializeTerminologyEntry(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}

static PyObject *
PyvtkSlicerTerminologiesModuleLogic_SerializeTerminologyEntry_s2(PyObject * /*unused*/, PyObject *args)
{
  vtkPythonArgs ap(args, "SerializeTerminologyEntry");

  std::string temp0;
  std::string temp1;
  std::string temp2;
  std::string temp3;
  std::string temp4;
  std::string temp5;
  std::string temp6;
  std::string temp7;
  std::string temp8;
  std::string temp9;
  std::string temp10;
  std::string temp11;
  std::string temp12;
  std::string temp13;
  std::string temp14;
  std::string temp15;
  std::string temp16;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(17) &&
      ap.GetValue(temp0) &&
      ap.GetValue(temp1) &&
      ap.GetValue(temp2) &&
      ap.GetValue(temp3) &&
      ap.GetValue(temp4) &&
      ap.GetValue(temp5) &&
      ap.GetValue(temp6) &&
      ap.GetValue(temp7) &&
      ap.GetValue(temp8) &&
      ap.GetValue(temp9) &&
      ap.GetValue(temp10) &&
      ap.GetValue(temp11) &&
      ap.GetValue(temp12) &&
      ap.GetValue(temp13) &&
      ap.GetValue(temp14) &&
      ap.GetValue(temp15) &&
      ap.GetValue(temp16))
  {
    std::string tempr = vtkSlicerTerminologiesModuleLogic::SerializeTerminologyEntry(temp0, temp1, temp2, temp3, temp4, temp5, temp6, temp7, temp8, temp9, temp10, temp11, temp12, temp13, temp14, temp15, temp16);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}

static PyObject *
PyvtkSlicerTerminologiesModuleLogic_SerializeTerminologyEntry(PyObject *self, PyObject *args)
{
  int nargs = vtkPythonArgs::GetArgCount(args);

  switch(nargs)
  {
    case 1:
      return PyvtkSlicerTerminologiesModuleLogic_SerializeTerminologyEntry_s1(self, args);
    case 17:
      return PyvtkSlicerTerminologiesModuleLogic_SerializeTerminologyEntry_s2(self, args);
  }

  vtkPythonArgs::ArgCountError(nargs, "SerializeTerminologyEntry");
  return nullptr;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_DeserializeTerminologyEntry(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "DeserializeTerminologyEntry");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  std::string temp0;
  vtkSlicerTerminologyEntry *temp1 = nullptr;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(2) &&
      ap.GetValue(temp0) &&
      ap.GetVTKObject(temp1, "vtkSlicerTerminologyEntry"))
  {
    bool tempr = (ap.IsBound() ?
      op->DeserializeTerminologyEntry(temp0, temp1) :
      op->vtkSlicerTerminologiesModuleLogic::DeserializeTerminologyEntry(temp0, temp1));

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_GetInfoStringFromTerminologyEntry(PyObject * /*unused*/, PyObject *args)
{
  vtkPythonArgs ap(args, "GetInfoStringFromTerminologyEntry");

  vtkSlicerTerminologyEntry *temp0 = nullptr;
  PyObject *result = nullptr;

  if (ap.CheckArgCount(1) &&
      ap.GetVTKObject(temp0, "vtkSlicerTerminologyEntry"))
  {
    std::string tempr = vtkSlicerTerminologiesModuleLogic::GetInfoStringFromTerminologyEntry(temp0);

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_GetUserContextsPath(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "GetUserContextsPath");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(0))
  {
    char *tempr = (ap.IsBound() ?
      op->GetUserContextsPath() :
      op->vtkSlicerTerminologiesModuleLogic::GetUserContextsPath());

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildValue(tempr);
    }
  }

  return result;
}


static PyObject *
PyvtkSlicerTerminologiesModuleLogic_SetUserContextsPath(PyObject *self, PyObject *args)
{
  vtkPythonArgs ap(self, args, "SetUserContextsPath");
  vtkObjectBase *vp = ap.GetSelfPointer(self, args);
  vtkSlicerTerminologiesModuleLogic *op = static_cast<vtkSlicerTerminologiesModuleLogic *>(vp);

  const char *temp0 = nullptr;
  PyObject *result = nullptr;

  if (op && ap.CheckArgCount(1) &&
      ap.GetValue(temp0))
  {
    if (ap.IsBound())
    {
      op->SetUserContextsPath(temp0);
    }
    else
    {
      op->vtkSlicerTerminologiesModuleLogic::SetUserContextsPath(temp0);
    }

    if (!ap.ErrorOccurred())
    {
      result = ap.BuildNone();
    }
  }

  return result;
}

static PyMethodDef PyvtkSlicerTerminologiesModuleLogic_Methods[] = {
  {"IsTypeOf", PyvtkSlicerTerminologiesModuleLogic_IsTypeOf, METH_VARARGS,
   "IsTypeOf(type:str) -> int\nC++: static vtkTypeBool IsTypeOf(const char *type)\n\nReturn 1 if this class type is the same type of (or a subclass\nof) the named class. Returns 0 otherwise. This method works in\ncombination with vtkTypeMacro found in vtkSetGet.h.\n"},
  {"IsA", PyvtkSlicerTerminologiesModuleLogic_IsA, METH_VARARGS,
   "IsA(self, type:str) -> int\nC++: vtkTypeBool IsA(const char *type) override;\n\nReturn 1 if this class is the same type of (or a subclass of) the\nnamed class. Returns 0 otherwise. This method works in\ncombination with vtkTypeMacro found in vtkSetGet.h.\n"},
  {"SafeDownCast", PyvtkSlicerTerminologiesModuleLogic_SafeDownCast, METH_VARARGS,
   "SafeDownCast(o:vtkObjectBase) -> vtkSlicerTerminologiesModuleLogic\nC++: static vtkSlicerTerminologiesModuleLogic *SafeDownCast(\n    vtkObjectBase *o)\n\n"},
  {"NewInstance", PyvtkSlicerTerminologiesModuleLogic_NewInstance, METH_VARARGS,
   "NewInstance(self) -> vtkSlicerTerminologiesModuleLogic\nC++: vtkSlicerTerminologiesModuleLogic *NewInstance()\n\n"},
  {"GetNumberOfGenerationsFromBaseType", PyvtkSlicerTerminologiesModuleLogic_GetNumberOfGenerationsFromBaseType, METH_VARARGS,
   "GetNumberOfGenerationsFromBaseType(type:str) -> int\nC++: static vtkIdType GetNumberOfGenerationsFromBaseType(\n    const char *type)\n\nGiven a the name of a base class of this class type, return the\ndistance of inheritance between this class type and the named\nclass (how many generations of inheritance are there between this\nclass and the named class). If the named class is not in this\nclass's inheritance tree, return a negative value. Valid\nresponses will always be nonnegative. This method works in\ncombination with vtkTypeMacro found in vtkSetGet.h.\n"},
  {"GetNumberOfGenerationsFromBase", PyvtkSlicerTerminologiesModuleLogic_GetNumberOfGenerationsFromBase, METH_VARARGS,
   "GetNumberOfGenerationsFromBase(self, type:str) -> int\nC++: vtkIdType GetNumberOfGenerationsFromBase(const char *type)\n    override;\n\nGiven the name of a base class of this class type, return the\ndistance of inheritance between this class type and the named\nclass (how many generations of inheritance are there between this\nclass and the named class). If the named class is not in this\nclass's inheritance tree, return a negative value. Valid\nresponses will always be nonnegative. This method works in\ncombination with vtkTypeMacro found in vtkSetGet.h.\n"},
  {"GetNameAutoGeneratedAttributeName", PyvtkSlicerTerminologiesModuleLogic_GetNameAutoGeneratedAttributeName, METH_VARARGS,
   "GetNameAutoGeneratedAttributeName() -> str\nC++: static const char *GetNameAutoGeneratedAttributeName()\n\nNode attribute name for name auto generated\n"},
  {"GetColorAutoGeneratedAttributeName", PyvtkSlicerTerminologiesModuleLogic_GetColorAutoGeneratedAttributeName, METH_VARARGS,
   "GetColorAutoGeneratedAttributeName() -> str\nC++: static const char *GetColorAutoGeneratedAttributeName()\n\nNode attribute name for color auto generated\n"},
  {"LoadContextFromFile", PyvtkSlicerTerminologiesModuleLogic_LoadContextFromFile, METH_VARARGS,
   "LoadContextFromFile(self, filePath:str) -> bool\nC++: bool LoadContextFromFile(std::string filePath)\n\nLoad terminology or anatomic context from JSON file. Note:\nSeparate generic loader function was created so that the file\ndoes not need to be loaded twice in case\n      the type of the context in the JSON file is not known\n\\param filePath File containing the context to load\n\\return Success flag\n"},
  {"LoadTerminologyFromFile", PyvtkSlicerTerminologiesModuleLogic_LoadTerminologyFromFile, METH_VARARGS,
   "LoadTerminologyFromFile(self, filePath:str) -> str\nC++: std::string LoadTerminologyFromFile(std::string filePath)\n\nLoad terminology dictionary from JSON terminology context file\ninto \\sa LoadedTerminologies.\n\\param filePath File containing the terminology to load\n\\return Context name (SegmentationCategoryTypeContextName) of the\nloaded terminology. Empty string on failure.\n"},
  {"LoadAnatomicContextFromFile", PyvtkSlicerTerminologiesModuleLogic_LoadAnatomicContextFromFile, METH_VARARGS,
   "LoadAnatomicContextFromFile(self, filePath:str) -> str\nC++: std::string LoadAnatomicContextFromFile(std::string filePath)\n\nLoad anatomic context dictionaries from JSON into \\sa\nLoadedAnatomicContexts\n\\param filePath File containing the anatomic context to load\n\\return Context name (AnatomicContextName) of the loaded anatomic\ncontext. Empty string on failure.\n"},
  {"LoadTerminologyFromSegmentDescriptorFile", PyvtkSlicerTerminologiesModuleLogic_LoadTerminologyFromSegmentDescriptorFile, METH_VARARGS,
   "LoadTerminologyFromSegmentDescriptorFile(self, contextName:str,\n    filePath:str) -> bool\nC++: bool LoadTerminologyFromSegmentDescriptorFile(\n    std::string contextName, std::string filePath)\n\nLoad terminology dictionary from segmentation descriptor JSON\nfile into \\sa LoadedTerminologies.\n\\param Terminology context name (the descriptor file does not\n    contain information about that)\n\\param filePath File containing the terminology to load\n\\return Success flag\n"},
  {"LoadAnatomicContextFromSegmentDescriptorFile", PyvtkSlicerTerminologiesModuleLogic_LoadAnatomicContextFromSegmentDescriptorFile, METH_VARARGS,
   "LoadAnatomicContextFromSegmentDescriptorFile(self,\n    contextName:str, filePath:str) -> bool\nC++: bool LoadAnatomicContextFromSegmentDescriptorFile(\n    std::string contextName, std::string filePath)\n\nLoad anatomic context dictionary from segmentation descriptor\nJSON file into \\sa LoadedAnatomicContexts. See also \\sa\nLoadTerminologyFromSegmentDescriptorFile\n"},
  {"GetLoadedTerminologyNames", PyvtkSlicerTerminologiesModuleLogic_GetLoadedTerminologyNames, METH_VARARGS,
   "GetLoadedTerminologyNames(self, terminologyNames:[str, ...])\n    -> None\nC++: void GetLoadedTerminologyNames(\n    std::vector<std::string> &terminologyNames)\nGetLoadedTerminologyNames(self, terminologyNames:vtkStringArray)\n    -> None\nC++: void GetLoadedTerminologyNames(\n    vtkStringArray *terminologyNames)\n\nGet context names of loaded terminologies\n"},
  {"GetLoadedAnatomicContextNames", PyvtkSlicerTerminologiesModuleLogic_GetLoadedAnatomicContextNames, METH_VARARGS,
   "GetLoadedAnatomicContextNames(self, anatomicContextNames:[str,\n    ...]) -> None\nC++: void GetLoadedAnatomicContextNames(\n    std::vector<std::string> &anatomicContextNames)\nGetLoadedAnatomicContextNames(self,\n    anatomicContextNames:vtkStringArray) -> None\nC++: void GetLoadedAnatomicContextNames(\n    vtkStringArray *anatomicContextNames)\n\nGet context names of loaded anatomic contexts\n"},
  {"GetNumberOfCategoriesInTerminology", PyvtkSlicerTerminologiesModuleLogic_GetNumberOfCategoriesInTerminology, METH_VARARGS,
   "GetNumberOfCategoriesInTerminology(self, terminologyName:str)\n    -> int\nC++: int GetNumberOfCategoriesInTerminology(\n    std::string terminologyName)\n\nGet number of categories in a terminology\n"},
  {"GetNthCategoryInTerminology", PyvtkSlicerTerminologiesModuleLogic_GetNthCategoryInTerminology, METH_VARARGS,
   "GetNthCategoryInTerminology(self, terminologyName:str,\n    categoryIndex:int, category:vtkSlicerTerminologyCategory)\n    -> bool\nC++: bool GetNthCategoryInTerminology(std::string terminologyName,\n     int categoryIndex, vtkSlicerTerminologyCategory *category)\n\nGet a category from a terminology by index.\n\\param categoryIndex specifies which category to return\n\\param category category is returned in this object\n\\return Success flag\n"},
  {"GetNumberOfTypesInTerminologyCategory", PyvtkSlicerTerminologiesModuleLogic_GetNumberOfTypesInTerminologyCategory, METH_VARARGS,
   "GetNumberOfTypesInTerminologyCategory(self, terminologyName:str,\n    category:vtkSlicerTerminologyCategory) -> int\nC++: int GetNumberOfTypesInTerminologyCategory(\n    std::string terminologyName,\n    vtkSlicerTerminologyCategory *category)\n\nGet number of types in the chosen category in a terminology\n"},
  {"GetNthTypeInTerminologyCategory", PyvtkSlicerTerminologiesModuleLogic_GetNthTypeInTerminologyCategory, METH_VARARGS,
   "GetNthTypeInTerminologyCategory(self, terminologyName:str,\n    category:vtkSlicerTerminologyCategory, typeIndex:int,\n    type:vtkSlicerTerminologyType) -> bool\nC++: bool GetNthTypeInTerminologyCategory(\n    std::string terminologyName,\n    vtkSlicerTerminologyCategory *category, int typeIndex,\n    vtkSlicerTerminologyType *type)\n\nGet a terminology type by index\n\\param terminologyName input terminology name\n\\param category input category\n\\param typeIndex index of type to return\n\\param typeObject output type\n\\return Success flag\n"},
  {"GetNumberOfTypeModifiersInTerminologyType", PyvtkSlicerTerminologiesModuleLogic_GetNumberOfTypeModifiersInTerminologyType, METH_VARARGS,
   "GetNumberOfTypeModifiersInTerminologyType(self,\n    terminologyName:str, category:vtkSlicerTerminologyCategory,\n    type:vtkSlicerTerminologyType) -> int\nC++: int GetNumberOfTypeModifiersInTerminologyType(\n    std::string terminologyName,\n    vtkSlicerTerminologyCategory *category,\n    vtkSlicerTerminologyType *type)\n\nGet number of type modifiers for the chosen category and type in\na terminology\n"},
  {"GetNthTypeModifierInTerminologyType", PyvtkSlicerTerminologiesModuleLogic_GetNthTypeModifierInTerminologyType, METH_VARARGS,
   "GetNthTypeModifierInTerminologyType(self, terminologyName:str,\n    category:vtkSlicerTerminologyCategory,\n    type:vtkSlicerTerminologyType, typeModifierIndex:int,\n    typeModifier:vtkSlicerTerminologyType) -> bool\nC++: bool GetNthTypeModifierInTerminologyType(\n    std::string terminologyName,\n    vtkSlicerTerminologyCategory *category,\n    vtkSlicerTerminologyType *type, int typeModifierIndex,\n    vtkSlicerTerminologyType *typeModifier)\n\nGet a terminology type by index\n\\param terminologyName input terminology name\n\\param category input category\n\\param typeObject input type\n\\param typeModifierIndex index of type modifier to return\n\\param typeModifier output type modifier\n\\return Success flag\n"},
  {"FindTypeInTerminologyBy3dSlicerLabel", PyvtkSlicerTerminologiesModuleLogic_FindTypeInTerminologyBy3dSlicerLabel, METH_VARARGS,
   "FindTypeInTerminologyBy3dSlicerLabel(self, terminologyName:str,\n    slicerLabel:str, entry:vtkSlicerTerminologyEntry) -> bool\nC++: bool FindTypeInTerminologyBy3dSlicerLabel(\n    std::string terminologyName, std::string slicerLabel,\n    vtkSlicerTerminologyEntry *entry)\n\nFind terminology type or type modifier based on '3dSlicerLabel'\nattribute\n\\param terminologyName Terminology context in which the attribute\nis looked for\n\\param slicerLabel Attribute to look for\n\\param entry Terminology entry populated if the attribute is\n    found\n\\return Flag indicating whether the attribute was found\n"},
  {"SerializeTerminologyEntry", PyvtkSlicerTerminologiesModuleLogic_SerializeTerminologyEntry, METH_VARARGS,
   "SerializeTerminologyEntry(entry:vtkSlicerTerminologyEntry) -> str\nC++: static std::string SerializeTerminologyEntry(\n    vtkSlicerTerminologyEntry *entry)\nSerializeTerminologyEntry(terminologyContextName:str,\n    categoryValue:str, categorySchemeDesignator:str,\n    categoryMeaning:str, typeValue:str, typeSchemeDesignator:str,\n    typeMeaning:str, modifierValue:str,\n    modifierSchemeDesignator:str, modifierMeaning:str,\n    anatomicContextName:str, regionValue:str,\n    regionSchemeDesignator:str, regionMeaning:str,\n    regionModifierValue:str, regionModifierSchemeDesignator:str,\n    regionModifierMeaning:str) -> str\nC++: static std::string SerializeTerminologyEntry(\n    std::string terminologyContextName, std::string categoryValue,\n     std::string categorySchemeDesignator,\n    std::string categoryMeaning, std::string typeValue,\n    std::string typeSchemeDesignator, std::string typeMeaning,\n    std::string modifierValue,\n    std::string modifierSchemeDesignator,\n    std::string modifierMeaning, std::string anatomicContextName,\n    std::string regionValue, std::string regionSchemeDesignator,\n    std::string regionMeaning, std::string regionModifierValue,\n    std::string regionModifierSchemeDesignator,\n    std::string regionModifierMeaning)\n\nConvert terminology entry VTK object to string containing\nidentifiers Serialized terminology entry consists of the\nfollowing: terminologyContextName, category (codingScheme,\ncodeValue, codeMeaning triple), type, typeModifier,\nanatomicContextName, anatomicRegion, anatomicRegionModifier\n"},
  {"DeserializeTerminologyEntry", PyvtkSlicerTerminologiesModuleLogic_DeserializeTerminologyEntry, METH_VARARGS,
   "DeserializeTerminologyEntry(self, serializedEntry:str,\n    entry:vtkSlicerTerminologyEntry) -> bool\nC++: bool DeserializeTerminologyEntry(std::string serializedEntry,\n     vtkSlicerTerminologyEntry *entry)\n\nPopulate terminology entry VTK object based on serialized entry\nSerialized terminology entry consists of the following:\nterminologyContextName, category (codingScheme, codeValue,\ncodeMeaning triple), type, typeModifier, anatomicContextName,\nanatomicRegion, anatomicRegionModifier\n\\return Success flag\n"},
  {"GetInfoStringFromTerminologyEntry", PyvtkSlicerTerminologiesModuleLogic_GetInfoStringFromTerminologyEntry, METH_VARARGS,
   "GetInfoStringFromTerminologyEntry(entry:vtkSlicerTerminologyEntry)\n     -> str\nC++: static std::string GetInfoStringFromTerminologyEntry(\n    vtkSlicerTerminologyEntry *entry)\n\nAssemble human readable info string from a terminology entry, for\nexample for tooltips\n"},
  {"GetUserContextsPath", PyvtkSlicerTerminologiesModuleLogic_GetUserContextsPath, METH_VARARGS,
   "GetUserContextsPath(self) -> str\nC++: virtual char *GetUserContextsPath()\n\n"},
  {"SetUserContextsPath", PyvtkSlicerTerminologiesModuleLogic_SetUserContextsPath, METH_VARARGS,
   "SetUserContextsPath(self, _arg:str) -> None\nC++: virtual void SetUserContextsPath(const char *_arg)\n\n"},
  {nullptr, nullptr, 0, nullptr}
};

static const char *PyvtkSlicerTerminologiesModuleLogic_Doc =
  "vtkSlicerTerminologiesModuleLogic - no description provided.\n\n"
  "Superclass: vtkSlicerModuleLogic\n\n"
;

#ifdef VTK_PYTHON_NEEDS_DEPRECATION_WARNING_SUPPRESSION
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

static PyTypeObject PyvtkSlicerTerminologiesModuleLogic_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  PYTHON_PACKAGE_SCOPE "vtkSlicerTerminologiesModuleLogicPython.vtkSlicerTerminologiesModuleLogic", // tp_name
  sizeof(PyVTKObject), // tp_basicsize
  0, // tp_itemsize
  PyVTKObject_Delete, // tp_dealloc
#if PY_VERSION_HEX >= 0x03080000
  0, // tp_vectorcall_offset
#else
  nullptr, // tp_print
#endif
  nullptr, // tp_getattr
  nullptr, // tp_setattr
  nullptr, // tp_compare
  PyVTKObject_Repr, // tp_repr
  nullptr, // tp_as_number
  nullptr, // tp_as_sequence
  nullptr, // tp_as_mapping
  nullptr, // tp_hash
  nullptr, // tp_call
  PyVTKObject_String, // tp_str
  PyObject_GenericGetAttr, // tp_getattro
  PyObject_GenericSetAttr, // tp_setattro
  &PyVTKObject_AsBuffer, // tp_as_buffer
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, // tp_flags
  PyvtkSlicerTerminologiesModuleLogic_Doc, // tp_doc
  PyVTKObject_Traverse, // tp_traverse
  nullptr, // tp_clear
  nullptr, // tp_richcompare
  offsetof(PyVTKObject, vtk_weakreflist), // tp_weaklistoffset
  nullptr, // tp_iter
  nullptr, // tp_iternext
  nullptr, // tp_methods
  nullptr, // tp_members
  PyVTKObject_GetSet, // tp_getset
  nullptr, // tp_base
  nullptr, // tp_dict
  nullptr, // tp_descr_get
  nullptr, // tp_descr_set
  offsetof(PyVTKObject, vtk_dict), // tp_dictoffset
  nullptr, // tp_init
  nullptr, // tp_alloc
  PyVTKObject_New, // tp_new
  PyObject_GC_Del, // tp_free
  nullptr, // tp_is_gc
  nullptr, // tp_bases
  nullptr, // tp_mro
  nullptr, // tp_cache
  nullptr, // tp_subclasses
  nullptr, // tp_weaklist
  VTK_WRAP_PYTHON_SUPPRESS_UNINITIALIZED
};

static vtkObjectBase *PyvtkSlicerTerminologiesModuleLogic_StaticNew()
{
  return vtkSlicerTerminologiesModuleLogic::New();
}

PyObject *PyvtkSlicerTerminologiesModuleLogic_ClassNew()
{
  PyTypeObject *pytype = PyVTKClass_Add(
    &PyvtkSlicerTerminologiesModuleLogic_Type, PyvtkSlicerTerminologiesModuleLogic_Methods,
    "vtkSlicerTerminologiesModuleLogic",
 &PyvtkSlicerTerminologiesModuleLogic_StaticNew);

  if ((PyType_GetFlags(pytype) & Py_TPFLAGS_READY) != 0)
  {
    return (PyObject *)pytype;
  }

  pytype->tp_base = vtkPythonUtil::FindBaseTypeObject("vtkSlicerModuleLogic");

  PyType_Ready(pytype);
  return (PyObject *)pytype;
}

void PyVTKAddFile_vtkSlicerTerminologiesModuleLogic(
  PyObject *dict)
{
  PyObject *o;
  o = PyvtkSlicerTerminologiesModuleLogic_ClassNew();

  if (o && PyDict_SetItemString(dict, "vtkSlicerTerminologiesModuleLogic", o) != 0)
  {
    Py_DECREF(o);
  }

}

